# lextab.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('ASSING', 'COMMA', 'COMMENT', 'DECIMAL', 'DIV', 'DOUBLEDOT', 'ENTERO', 'IDENT', 'IGUAL', 'IN', 'LBRACE', 'LBRACKET', 'LOGICO', 'LPAREN', 'MAYOR', 'MAYOR_IGUAL', 'MENOR', 'MENOR_IGUAL', 'NOT', 'OUT', 'PIN', 'PROD', 'PUNTO', 'RBRACE', 'RBRACKET', 'RESTA', 'RPAREN', 'SEMICOLON', 'SINGLEDOT', 'SPACE', 'SUM', 'TEXTO', 'VAR_ASSING', 'and', 'backward', 'begin', 'end', 'foward', 'function', 'left', 'library', 'or', 'procedure', 'right', 'stop', 'tk_else', 'tk_if', 'tk_while', 'var', 'wait'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_IDENT>[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_ENTERO>\\d+)|(?P<t_DECIMAL>\\d+.\\d+)|(?P<t_TEXTO>\\w+)|(?P<t_LOGICO>true|false)|(?P<t_COMMENT>\\#.*)|(?P<t_newline>\\n+)|(?P<t_IGUAL>\\==)|(?P<t_MAYOR_IGUAL>\\>=)|(?P<t_MENOR_IGUAL>\\<=)|(?P<t_SUM>\\+)|(?P<t_RESTA>\\-)|(?P<t_PROD>\\*)|(?P<t_DIV>\\/)|(?P<t_MAYOR>\\>)|(?P<t_MENOR>\\<)|(?P<t_SEMICOLON>\\;)|(?P<t_VAR_ASSING>\\:)|(?P<t_ASSING>\\=)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_LBRACKET>\\[)|(?P<t_RBRACKET>\\])|(?P<t_COMMA>\\,)|(?P<t_SINGLEDOT>\\\')|(?P<t_DOUBLEDOT>\\")|(?P<t_PUNTO>\\.)|(?P<t_NOT>\\!)|(?P<t_ignore_SPACE>\\t)', [None, ('t_IDENT', 'IDENT'), ('t_ENTERO', 'ENTERO'), ('t_DECIMAL', 'DECIMAL'), ('t_TEXTO', 'TEXTO'), ('t_LOGICO', 'LOGICO'), ('t_COMMENT', 'COMMENT'), ('t_newline', 'newline'), (None, 'IGUAL'), (None, 'MAYOR_IGUAL'), (None, 'MENOR_IGUAL'), (None, 'SUM'), (None, 'RESTA'), (None, 'PROD'), (None, 'DIV'), (None, 'MAYOR'), (None, 'MENOR'), (None, 'SEMICOLON'), (None, 'VAR_ASSING'), (None, 'ASSING'), (None, 'LPAREN'), (None, 'RPAREN'), (None, 'LBRACE'), (None, 'RBRACE'), (None, 'LBRACKET'), (None, 'RBRACKET'), (None, 'COMMA'), (None, 'SINGLEDOT'), (None, 'DOUBLEDOT'), (None, 'PUNTO'), (None, 'NOT'), (None, None)])]}
_lexstateignore = {'INITIAL': ''}
_lexstateerrorf = {'INITIAL': 't_error'}
_lexstateeoff = {}
